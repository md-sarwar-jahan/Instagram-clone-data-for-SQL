üîç SQL Query Showcase
This project demonstrates advanced MySQL capabilities through these analytical queries:

User Analytics Queries
1. Early Adopters Identification
Finds the platform's first 5 registered users, showing basic sorting and limiting:

sql
SELECT * FROM users ORDER BY created_at LIMIT 5;
2. Peak Registration Days
Identifies which weekdays see the most signups, demonstrating date functions and aggregation:

sql
SELECT DAYNAME(created_at) AS day, COUNT(*) AS total
FROM users GROUP BY day ORDER BY total DESC LIMIT 2;
Content Engagement Analysis
3. Inactive User Detection
Locates accounts that haven't posted any photos using LEFT JOIN and NULL checks:

sql
SELECT username FROM users
LEFT JOIN photos ON users.id = photos.user_id
WHERE photos.id IS NULL;
4. Viral Content Identification
Finds the most-liked photo with owner details, showcasing multi-table joins and counting:

sql
SELECT username, photos.id, photos.image_url, COUNT(*) AS likes
FROM photos
INNER JOIN likes ON likes.photo_id = photos.id
INNER JOIN users ON photos.user_id = users.id
GROUP BY photos.id ORDER BY likes DESC LIMIT 1;
Platform Metrics
5. User Engagement Benchmark
Calculates average posts per user with subquery math operations:

sql
SELECT 
  (SELECT COUNT(*) FROM photos) / 
  (SELECT COUNT(*) FROM users) AS avg_posts_per_user;
6. Trending Hashtags
Identifies top 5 most-used tags with counting and sorting:

sql
SELECT tags.tag_name, COUNT(*) AS usage_count
FROM photo_tags
JOIN tags ON photo_tags.tag_id = tags.id
GROUP BY tags.id ORDER BY usage_count DESC LIMIT 5;
7. Superfan Detection
Finds users who liked every single post, demonstrating HAVING with subqueries:

sql
SELECT username, COUNT(*) AS num_likes
FROM users INNER JOIN likes ON users.id = likes.user_id
GROUP BY likes.user_id
HAVING num_likes = (SELECT COUNT(*) FROM photos);
Each query demonstrates real-world social media analytics while showcasing different SQL techniques from basic filtering to complex joins and aggregations.
